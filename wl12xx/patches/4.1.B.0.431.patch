diff -uNr a/drivers/net/wireless/wl12xx/conf.h b/drivers/net/wireless/wl12xx/conf.h
--- a/drivers/net/wireless/wl12xx/conf.h	2012-06-12 21:42:06.000000000 +0300
+++ b/drivers/net/wireless/wl12xx/conf.h	2012-06-10 17:35:50.000000000 +0300
@@ -2,6 +2,7 @@
  * This file is part of wl1271
  *
  * Copyright (C) 2009 Nokia Corporation
+ * Copyright (C) 2012 Sony Mobile Communications AB
  *
  * Contact: Luciano Coelho <luciano.coelho@nokia.com>
  *
@@ -933,6 +934,13 @@
 	u8 psm_entry_retries;
 
 	/*
+	 * Specifies the time in ms to wait before retrying PSM entry.
+	 *
+	 * Range 0 - 100
+	 */
+	u32 psm_entry_retry_delay;
+
+	/*
 	 * Specifies the maximum number of times to try PSM exit if it fails
 	 * (if sending the appropriate null-func message fails.)
 	 *
diff -uNr a/drivers/net/wireless/wl12xx/event.c b/drivers/net/wireless/wl12xx/event.c
--- a/drivers/net/wireless/wl12xx/event.c	2012-06-12 21:42:06.000000000 +0300
+++ b/drivers/net/wireless/wl12xx/event.c	2012-06-10 17:35:50.000000000 +0300
@@ -2,6 +2,7 @@
  * This file is part of wl1271
  *
  * Copyright (C) 2008-2009 Nokia Corporation
+ * Copyright (C) 2012 Sony Mobile Communications AB
  *
  * Contact: Luciano Coelho <luciano.coelho@nokia.com>
  *
@@ -96,12 +97,44 @@
 	 */
 }
 
+void wl1271_ps_retry_work(struct work_struct *work)
+{
+	struct delayed_work *dwork;
+	struct wl1271 *wl;
+	int ret;
+
+	dwork = container_of(work, struct delayed_work, work);
+	wl = container_of(dwork, struct wl1271, ps_retry_work);
+
+	wl1271_debug(DEBUG_PSM, "ps retry work");
+
+	mutex_lock(&wl->mutex);
+
+	if (!test_bit(WL1271_FLAG_PSM, &wl->flags))
+		goto out_unlock;
+
+	ret = wl1271_ps_elp_wakeup(wl);
+	if (ret < 0)
+		goto out_unlock;
+
+	wl->psm_entry_retry++;
+	wl1271_ps_set_mode(wl, STATION_POWER_SAVE_MODE,
+			   wl->basic_rate, true);
+
+	wl1271_ps_elp_sleep(wl);
+
+
+out_unlock:
+	mutex_unlock(&wl->mutex);
+}
+
 static int wl1271_event_ps_report(struct wl1271 *wl,
 				  struct event_mailbox *mbox,
 				  bool *beacon_loss)
 {
 	int ret = 0;
 	u32 total_retries = wl->conf.conn.psm_entry_retries;
+	u32 delay = wl->conf.conn.psm_entry_retry_delay;
 
 	wl1271_debug(DEBUG_EVENT, "ps_status: 0x%x", mbox->ps_status);
 
@@ -112,13 +145,15 @@
 		if (!test_bit(WL1271_FLAG_PSM, &wl->flags)) {
 			/* remain in active mode */
 			wl->psm_entry_retry = 0;
+			cancel_delayed_work(&wl->ps_retry_work);
 			break;
 		}
 
 		if (wl->psm_entry_retry < total_retries) {
-			wl->psm_entry_retry++;
-			ret = wl1271_ps_set_mode(wl, STATION_POWER_SAVE_MODE,
-						 wl->basic_rate, true);
+			ieee80211_queue_delayed_work(wl->hw,
+						     &wl->ps_retry_work,
+						     msecs_to_jiffies(delay));
+
 		} else {
 			wl1271_info("No ack to nullfunc from AP.");
 			wl->psm_entry_retry = 0;
@@ -127,6 +162,7 @@
 		break;
 	case EVENT_ENTER_POWER_SAVE_SUCCESS:
 		wl->psm_entry_retry = 0;
+		cancel_delayed_work(&wl->ps_retry_work);
 
 		/* enable beacon filtering */
 		ret = wl1271_acx_beacon_filter_opt(wl, true);
diff -uNr a/drivers/net/wireless/wl12xx/event.h b/drivers/net/wireless/wl12xx/event.h
--- a/drivers/net/wireless/wl12xx/event.h	2012-06-12 21:42:05.000000000 +0300
+++ b/drivers/net/wireless/wl12xx/event.h	2012-06-10 17:35:50.000000000 +0300
@@ -3,6 +3,7 @@
  *
  * Copyright (C) 1998-2009 Texas Instruments. All rights reserved.
  * Copyright (C) 2008-2009 Nokia Corporation
+ * Copyright (C) 2012 Sony Mobile Communications AB
  *
  * Contact: Luciano Coelho <luciano.coelho@nokia.com>
  *
@@ -134,6 +135,7 @@
 void wl1271_event_mbox_config(struct wl1271 *wl);
 int wl1271_event_handle(struct wl1271 *wl, u8 mbox);
 void wl1271_pspoll_work(struct work_struct *work);
+void wl1271_ps_retry_work(struct work_struct *work);
 
 /* Functions from main.c */
 bool wl1271_is_active_sta(struct wl1271 *wl, u8 hlid);
diff -uNr a/drivers/net/wireless/wl12xx/main.c b/drivers/net/wireless/wl12xx/main.c
--- a/drivers/net/wireless/wl12xx/main.c	2012-06-12 21:42:06.000000000 +0300
+++ b/drivers/net/wireless/wl12xx/main.c	2012-06-10 17:35:50.000000000 +0300
@@ -2,6 +2,7 @@
  * This file is part of wl1271
  *
  * Copyright (C) 2008-2010 Nokia Corporation
+ * Copyright (C) 2012 Sony Mobile Communications AB
  *
  * Contact: Luciano Coelho <luciano.coelho@nokia.com>
  *
@@ -238,7 +239,8 @@
 		.ps_poll_recovery_period     = 700,
 		.bet_enable                  = CONF_BET_MODE_ENABLE,
 		.bet_max_consecutive         = 50,
-		.psm_entry_retries           = 8,
+		.psm_entry_retries           = 20,
+		.psm_entry_retry_delay       = 20,
 		.psm_exit_retries            = 16,
 		.psm_entry_nullfunc_retries  = 3,
 		.keep_alive_interval         = 55000,
@@ -1294,7 +1296,9 @@
 	/* Avoid a recursive recovery */
 	set_bit(WL1271_FLAG_RECOVERY_IN_PROGRESS, &wl->flags);
 
-	wl12xx_read_fwlog_panic(wl);
+	/* Only read FW crash log if debugging. */
+	if (wl12xx_debug_level)
+		wl12xx_read_fwlog_panic(wl);
 
 	wl1271_info("Hardware recovery in progress. FW ver: %s pc: 0x%x",
 		    wl->chip.fw_ver_str, wl1271_read32(wl, SCR_PAD4));
@@ -2338,6 +2342,7 @@
 	del_timer_sync(&wl->rx_streaming_timer);
 	cancel_work_sync(&wl->rx_streaming_enable_work);
 	cancel_work_sync(&wl->rx_streaming_disable_work);
+	cancel_delayed_work_sync(&wl->ps_retry_work);
 	cancel_delayed_work_sync(&wl->pspoll_work);
 	cancel_work_sync(&wl->ap_start_work);
 	cancel_delayed_work_sync(&wl->elp_work);
@@ -5347,6 +5352,7 @@
 
 	INIT_DELAYED_WORK(&wl->elp_work, wl1271_elp_work);
 	INIT_DELAYED_WORK(&wl->pspoll_work, wl1271_pspoll_work);
+	INIT_DELAYED_WORK(&wl->ps_retry_work, wl1271_ps_retry_work);
 	INIT_WORK(&wl->netstack_work, wl1271_netstack_work);
 	INIT_WORK(&wl->tx_work, wl1271_tx_work);
 	INIT_WORK(&wl->recovery_work, wl1271_recovery_work);
diff -uNr a/drivers/net/wireless/wl12xx/ps.c b/drivers/net/wireless/wl12xx/ps.c
--- a/drivers/net/wireless/wl12xx/ps.c	2012-06-12 21:42:06.000000000 +0300
+++ b/drivers/net/wireless/wl12xx/ps.c	2012-06-10 17:35:50.000000000 +0300
@@ -2,6 +2,7 @@
  * This file is part of wl1271
  *
  * Copyright (C) 2008-2009 Nokia Corporation
+ * Copyright (C) 2012 Sony Mobile Communications AB
  *
  * Contact: Luciano Coelho <luciano.coelho@nokia.com>
  *
@@ -171,6 +172,9 @@
 	default:
 		wl1271_debug(DEBUG_PSM, "leaving psm");
 
+		wl->psm_entry_retry = 0;
+		cancel_delayed_work(&wl->ps_retry_work);
+
 		/* disable beacon early termination */
 		if (wl->band == IEEE80211_BAND_2GHZ) {
 			ret = wl1271_acx_bet_enable(wl, false);
diff -uNr a/drivers/net/wireless/wl12xx/wl12xx.h b/drivers/net/wireless/wl12xx/wl12xx.h
--- a/drivers/net/wireless/wl12xx/wl12xx.h	2012-06-12 21:42:06.000000000 +0300
+++ b/drivers/net/wireless/wl12xx/wl12xx.h	2012-06-10 17:35:50.000000000 +0300
@@ -622,6 +622,7 @@
 	struct completion *ps_compl;
 	struct delayed_work elp_work;
 	struct delayed_work pspoll_work;
+	struct delayed_work ps_retry_work;
 
 	/* counter for ps-poll delivery failures */
 	int ps_poll_failures;
diff -uNr a/net/mac80211/mlme.c b/net/mac80211/mlme.c
--- a/net/mac80211/mlme.c	2012-06-12 21:42:06.000000000 +0300
+++ b/net/mac80211/mlme.c	2012-06-10 17:35:50.000000000 +0300
@@ -1998,20 +1998,20 @@
 	if (skb->len >= 24 + 2 /* mgmt + deauth reason */ &&
 	    (fc & IEEE80211_FCTL_STYPE) == IEEE80211_STYPE_DEAUTH) {
 		struct ieee80211_local *local = sdata->local;
-		struct ieee80211_work *wk;
+		struct ieee80211_work *tmp, *wk = NULL;
 
 		mutex_lock(&local->mtx);
-		list_for_each_entry(wk, &local->work_list, list) {
-			if (wk->sdata != sdata)
+		list_for_each_entry(tmp, &local->work_list, list) {
+			if (tmp->sdata != sdata)
 				continue;
 
-			if (wk->type != IEEE80211_WORK_ASSOC &&
-			    wk->type != IEEE80211_WORK_ASSOC_BEACON_WAIT)
+			if (tmp->type != IEEE80211_WORK_ASSOC &&
+			    tmp->type != IEEE80211_WORK_ASSOC_BEACON_WAIT)
 				continue;
 
-			if (memcmp(mgmt->bssid, wk->filter_ta, ETH_ALEN))
+			if (memcmp(mgmt->bssid, tmp->filter_ta, ETH_ALEN))
 				continue;
-			if (memcmp(mgmt->sa, wk->filter_ta, ETH_ALEN))
+			if (memcmp(mgmt->sa, tmp->filter_ta, ETH_ALEN))
 				continue;
 
 			/*
@@ -2028,12 +2028,19 @@
 			       sdata->name, mgmt->bssid,
 			       le16_to_cpu(mgmt->u.deauth.reason_code));
 
-			list_del_rcu(&wk->list);
-			free_work(wk);
+			list_del_rcu(&tmp->list);
+			synchronize_rcu();
+			wk = tmp;
 			break;
 		}
 		mutex_unlock(&local->mtx);
 
+		if (wk && wk->type == IEEE80211_WORK_ASSOC) {
+			/* clean up dummy sta */
+			sta_info_destroy_addr(wk->sdata, wk->filter_ta);
+		}
+		kfree(wk);
+
 		cfg80211_send_deauth(sdata->dev, (u8 *)mgmt, skb->len);
 	}
 }
@@ -2197,13 +2204,16 @@
 
 static void ieee80211_restart_sta_timer(struct ieee80211_sub_if_data *sdata)
 {
+	u32 flags;
 	if (sdata->vif.type == NL80211_IFTYPE_STATION) {
 		sdata->u.mgd.flags &= ~(IEEE80211_STA_BEACON_POLL |
 					IEEE80211_STA_CONNECTION_POLL);
 
 		/* let's probe the connection once */
-		ieee80211_queue_work(&sdata->local->hw,
-			   &sdata->u.mgd.monitor_work);
+		flags = sdata->local->hw.flags;
+		if (!(flags & IEEE80211_HW_CONNECTION_MONITOR))
+			ieee80211_queue_work(&sdata->local->hw,
+					     &sdata->u.mgd.monitor_work);
 		/* and do all the other regular work too */
 		ieee80211_queue_work(&sdata->local->hw, &sdata->work);
 	}
