diff -uNr a/drivers/net/wireless/wl12xx/io.h b/drivers/net/wireless/wl12xx/io.h
--- a/drivers/net/wireless/wl12xx/io.h	2012-03-12 18:41:21.000000000 +0200
+++ b/drivers/net/wireless/wl12xx/io.h	2012-04-10 17:01:42.000000000 +0300
@@ -3,6 +3,7 @@
  *
  * Copyright (C) 1998-2009 Texas Instruments. All rights reserved.
  * Copyright (C) 2008-2010 Nokia Corporation
+ * Copyright (C) 2012 Sony Mobile Communications AB
  *
  * Contact: Luciano Coelho <luciano.coelho@nokia.com>
  *
@@ -154,6 +155,7 @@
 
 static inline void wl1271_power_off(struct wl1271 *wl)
 {
+	wl->if_ops->disable_wkup(wl);
 	wl->if_ops->power(wl, false);
 	clear_bit(WL1271_FLAG_GPIO_POWER, &wl->flags);
 }
@@ -161,8 +163,10 @@
 static inline int wl1271_power_on(struct wl1271 *wl)
 {
 	int ret = wl->if_ops->power(wl, true);
-	if (ret == 0)
+	if (ret == 0) {
+		wl->if_ops->enable_wkup(wl);
 		set_bit(WL1271_FLAG_GPIO_POWER, &wl->flags);
+	}
 
 	return ret;
 }
diff -uNr a/drivers/net/wireless/wl12xx/main.c b/drivers/net/wireless/wl12xx/main.c
--- a/drivers/net/wireless/wl12xx/main.c	2012-03-12 18:41:21.000000000 +0200
+++ b/drivers/net/wireless/wl12xx/main.c	2012-04-10 17:01:42.000000000 +0300
@@ -4396,6 +4396,23 @@
 	wl->active_sta_count--;
 }
 
+static int wl12xx_sta_authorize(struct wl1271 *wl,
+				struct ieee80211_sta *sta)
+{
+	struct wl1271_station *wl_sta;
+	int ret;
+
+	wl_sta = (struct wl1271_station *)sta->drv_priv;
+	if (wl_sta->authorized)
+		return -EALREADY;
+
+	ret = wl1271_acx_set_ht_capabilities(wl, &sta->ht_cap, true,
+					     wl_sta->hlid);
+	wl_sta->authorized = true;
+
+	return ret;
+}
+
 static int wl1271_op_sta_add_locked(struct ieee80211_hw *hw,
 				    struct ieee80211_vif *vif,
 				    struct ieee80211_sta *sta)
@@ -4416,9 +4433,11 @@
 	if (ret < 0)
 		goto out;
 
-	ret = wl1271_acx_set_ht_capabilities(wl, &sta->ht_cap, true, hlid);
-	if (ret < 0)
-		goto out;
+	if (sta->authorized) {
+		ret = wl12xx_sta_authorize(wl, sta);
+		if (ret < 0)
+			goto out;
+	}
 
 	wl_sta = (struct wl1271_station *)sta->drv_priv;
 	wl_sta->added = true;
@@ -4429,6 +4448,27 @@
 	return ret;
 }
 
+static void wl12xx_op_sta_authorize(struct ieee80211_hw *hw,
+				    struct ieee80211_vif *vif,
+				    struct ieee80211_sta *sta)
+{
+	struct wl1271 *wl = hw->priv;
+	int ret;
+
+	wl1271_debug(DEBUG_MAC80211, "mac80211 auth sta %d", (int)sta->aid);
+	mutex_lock(&wl->mutex);
+
+	ret = wl1271_ps_elp_wakeup(wl);
+	if (ret < 0)
+		goto out;
+
+	ret = wl12xx_sta_authorize(wl, sta);
+
+	wl1271_ps_elp_sleep(wl);
+out:
+	mutex_unlock(&wl->mutex);
+
+}
 static int wl1271_op_sta_add(struct ieee80211_hw *hw,
 			     struct ieee80211_vif *vif,
 			     struct ieee80211_sta *sta)
@@ -4948,6 +4988,7 @@
 	.get_survey = wl1271_op_get_survey,
 	.sta_add = wl1271_op_sta_add,
 	.sta_remove = wl1271_op_sta_remove,
+	.sta_authorize = wl12xx_op_sta_authorize,
 	.ampdu_action = wl1271_op_ampdu_action,
 	.tx_frames_pending = wl1271_tx_frames_pending,
 	.channel_switch = wl12xx_op_channel_switch,
diff -uNr a/drivers/net/wireless/wl12xx/sdio.c b/drivers/net/wireless/wl12xx/sdio.c
--- a/drivers/net/wireless/wl12xx/sdio.c	2012-03-12 18:41:21.000000000 +0200
+++ b/drivers/net/wireless/wl12xx/sdio.c	2012-04-10 17:01:42.000000000 +0300
@@ -2,6 +2,7 @@
  * This file is part of wl1271
  *
  * Copyright (C) 2009-2010 Nokia Corporation
+ * Copyright (C) 2012 Sony Mobile Communications AB
  *
  * Contact: Luciano Coelho <luciano.coelho@nokia.com>
  *
@@ -104,6 +105,41 @@
 	return IRQ_WAKE_THREAD;
 }
 
+static void wl1271_sdio_disable_irq_wake(struct wl1271 *wl)
+{
+	if (wl->irq_wake_enabled) {
+		device_init_wakeup(wl1271_sdio_wl_to_dev(wl), 0);
+		disable_irq_wake(wl->irq);
+	}
+}
+
+static void wl1271_sdio_enable_irq_wake(struct wl1271 *wl)
+{
+	int ret;
+	mmc_pm_flag_t mmcflags;
+	struct ieee80211_hw *hw = wl->hw;
+	struct sdio_func *func = wl_to_func(wl);
+
+	ret = enable_irq_wake(wl->irq);
+	if (!ret) {
+		wl->irq_wake_enabled = true;
+		device_init_wakeup(wl1271_sdio_wl_to_dev(wl), 1);
+
+		/* if sdio can keep power while host is suspended, enable wow */
+		mmcflags = sdio_get_host_pm_caps(func);
+		wl1271_debug(DEBUG_SDIO, "sdio PM caps = 0x%x", mmcflags);
+
+		if (mmcflags & MMC_PM_KEEP_POWER) {
+			hw->wiphy->wowlan.flags = WIPHY_WOWLAN_ANY;
+			hw->wiphy->wowlan.n_patterns =
+					WL1271_MAX_RX_DATA_FILTERS;
+			hw->wiphy->wowlan.pattern_min_len = 1;
+			hw->wiphy->wowlan.pattern_max_len =
+					WL1271_RX_DATA_FILTER_MAX_PATTERN_SIZE;
+		}
+	}
+}
+
 static void wl1271_sdio_disable_interrupts(struct wl1271 *wl)
 {
 	disable_irq(wl->irq);
@@ -223,6 +259,8 @@
 	.dev		= wl1271_sdio_wl_to_dev,
 	.enable_irq	= wl1271_sdio_enable_interrupts,
 	.disable_irq	= wl1271_sdio_disable_interrupts,
+	.enable_wkup	= wl1271_sdio_enable_irq_wake,
+	.disable_wkup	= wl1271_sdio_disable_irq_wake,
 	.set_block_size = wl1271_sdio_set_block_size,
 };
 
@@ -233,7 +271,6 @@
 	const struct wl12xx_platform_data *wlan_data;
 	struct wl1271 *wl;
 	unsigned long irqflags;
-	mmc_pm_flag_t mmcflags;
 	int ret;
 
 	/* We are only able to handle the wlan function */
@@ -282,24 +319,6 @@
 		goto out_free;
 	}
 
-	ret = enable_irq_wake(wl->irq);
-	if (!ret) {
-		wl->irq_wake_enabled = true;
-		device_init_wakeup(wl1271_sdio_wl_to_dev(wl), 1);
-
-		/* if sdio can keep power while host is suspended, enable wow */
-		mmcflags = sdio_get_host_pm_caps(func);
-		wl1271_debug(DEBUG_SDIO, "sdio PM caps = 0x%x", mmcflags);
-
-		if (mmcflags & MMC_PM_KEEP_POWER) {
-			hw->wiphy->wowlan.flags = WIPHY_WOWLAN_ANY;
-			hw->wiphy->wowlan.n_patterns =
-					WL1271_MAX_RX_DATA_FILTERS;
-			hw->wiphy->wowlan.pattern_min_len = 1;
-			hw->wiphy->wowlan.pattern_max_len =
-					WL1271_RX_DATA_FILTER_MAX_PATTERN_SIZE;
-		}
-	}
 	disable_irq(wl->irq);
 
 	sdio_set_host_pm_flags(func, MMC_PM_KEEP_POWER);
@@ -341,10 +360,6 @@
 	host->pm_flags = host->pm_flags & ~MMC_PM_KEEP_POWER;
 
 	wl1271_unregister_hw(wl);
-	if (wl->irq_wake_enabled) {
-		device_init_wakeup(wl1271_sdio_wl_to_dev(wl), 0);
-		disable_irq_wake(wl->irq);
-	}
 	free_irq(wl->irq, wl);
 	wl1271_free_hw(wl);
 }
diff -uNr a/drivers/net/wireless/wl12xx/wl12xx.h b/drivers/net/wireless/wl12xx/wl12xx.h
--- a/drivers/net/wireless/wl12xx/wl12xx.h	2012-03-12 18:41:21.000000000 +0200
+++ b/drivers/net/wireless/wl12xx/wl12xx.h	2012-04-10 17:01:42.000000000 +0300
@@ -3,6 +3,7 @@
  *
  * Copyright (C) 1998-2009 Texas Instruments. All rights reserved.
  * Copyright (C) 2008-2009 Nokia Corporation
+ * Copyright (C) 2012 Sony Mobile Communications AB
  *
  * Contact: Luciano Coelho <luciano.coelho@nokia.com>
  *
@@ -339,6 +340,8 @@
 	struct device* (*dev)(struct wl1271 *wl);
 	void (*enable_irq)(struct wl1271 *wl);
 	void (*disable_irq)(struct wl1271 *wl);
+	void (*enable_wkup)(struct wl1271 *wl);
+	void (*disable_wkup)(struct wl1271 *wl);
 	void (*set_block_size) (struct wl1271 *wl, unsigned int blksz);
 };
 
@@ -734,6 +737,7 @@
 
 struct wl1271_station {
 	bool added;
+	bool authorized;
 	u8 hlid;
 };
 
diff -uNr a/include/net/mac80211.h b/include/net/mac80211.h
--- a/include/net/mac80211.h	2012-03-12 18:41:21.000000000 +0200
+++ b/include/net/mac80211.h	2012-04-10 17:01:43.000000000 +0300
@@ -957,6 +957,7 @@
 	bool wme;
 	u8 uapsd_queues;
 	u8 max_sp;
+	bool authorized;
 
 	/* must be last */
 	u8 drv_priv[0] __attribute__((__aligned__(sizeof(void *))));
@@ -1961,6 +1962,9 @@
 			  struct ieee80211_sta *sta);
 	void (*sta_notify)(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 			enum sta_notify_cmd, struct ieee80211_sta *sta);
+	void (*sta_authorize)(struct ieee80211_hw *hw,
+			      struct ieee80211_vif *vif,
+			      struct ieee80211_sta *sta);
 	int (*conf_tx)(struct ieee80211_hw *hw, u16 queue,
 		       const struct ieee80211_tx_queue_params *params);
 	u64 (*get_tsf)(struct ieee80211_hw *hw);
diff -uNr a/net/mac80211/cfg.c b/net/mac80211/cfg.c
--- a/net/mac80211/cfg.c	2012-03-12 18:41:21.000000000 +0200
+++ b/net/mac80211/cfg.c	2012-04-10 17:01:43.000000000 +0300
@@ -662,8 +662,11 @@
 
 	if (mask & BIT(NL80211_STA_FLAG_AUTHORIZED)) {
 		sta->flags &= ~WLAN_STA_AUTHORIZED;
-		if (set & BIT(NL80211_STA_FLAG_AUTHORIZED))
+		sta->sta.authorized = false;
+		if (set & BIT(NL80211_STA_FLAG_AUTHORIZED)) {
 			sta->flags |= WLAN_STA_AUTHORIZED;
+			sta->sta.authorized = true;
+		}
 	}
 
 	if (mask & BIT(NL80211_STA_FLAG_SHORT_PREAMBLE)) {
@@ -912,6 +915,15 @@
 	sta_apply_parameters(local, sta, params);
 
 	rcu_read_unlock();
+
+	if (!is_dummy &&
+	    (params->sta_flags_mask & BIT(NL80211_STA_FLAG_AUTHORIZED)) &&
+	    (params->sta_flags_set & BIT(NL80211_STA_FLAG_AUTHORIZED))) {
+		mutex_lock(&sdata->local->sta_mtx);
+		drv_sta_authorize(local, sdata, &sta->sta);
+		mutex_unlock(&sdata->local->sta_mtx);
+	}
+
 	if (is_dummy &&
 	    (params->sta_flags_mask & BIT(NL80211_STA_FLAG_PRE_ASSOC)) &&
 	    !(params->sta_flags_set & BIT(NL80211_STA_FLAG_PRE_ASSOC)))
diff -uNr a/net/mac80211/driver-ops.h b/net/mac80211/driver-ops.h
--- a/net/mac80211/driver-ops.h	2012-03-12 18:41:21.000000000 +0200
+++ b/net/mac80211/driver-ops.h	2012-04-10 17:01:43.000000000 +0300
@@ -366,6 +366,16 @@
 	trace_drv_return_void(local);
 }
 
+static inline void drv_sta_authorize(struct ieee80211_local *local,
+				     struct ieee80211_sub_if_data *sdata,
+				     struct ieee80211_sta *sta)
+{
+	trace_drv_sta_authorize(local, sdata, sta);
+	if (local->ops->sta_authorize)
+		local->ops->sta_authorize(&local->hw, &sdata->vif, sta);
+	trace_drv_return_void(local);
+}
+
 static inline int drv_sta_add(struct ieee80211_local *local,
 			      struct ieee80211_sub_if_data *sdata,
 			      struct ieee80211_sta *sta)
diff -uNr a/net/mac80211/driver-trace.h b/net/mac80211/driver-trace.h
--- a/net/mac80211/driver-trace.h	2012-03-12 18:41:21.000000000 +0200
+++ b/net/mac80211/driver-trace.h	2012-04-10 17:01:43.000000000 +0300
@@ -603,6 +603,31 @@
 	)
 );
 
+TRACE_EVENT(drv_sta_authorize,
+	TP_PROTO(struct ieee80211_local *local,
+		 struct ieee80211_sub_if_data *sdata,
+		 struct ieee80211_sta *sta),
+
+	TP_ARGS(local, sdata, sta),
+
+	TP_STRUCT__entry(
+		LOCAL_ENTRY
+		VIF_ENTRY
+		STA_ENTRY
+	),
+
+	TP_fast_assign(
+		LOCAL_ASSIGN;
+		VIF_ASSIGN;
+		STA_ASSIGN;
+	),
+
+	TP_printk(
+		LOCAL_PR_FMT  VIF_PR_FMT  STA_PR_FMT,
+		LOCAL_PR_ARG, VIF_PR_ARG, STA_PR_ARG
+	)
+);
+
 TRACE_EVENT(drv_sta_add,
 	TP_PROTO(struct ieee80211_local *local,
 		 struct ieee80211_sub_if_data *sdata,
diff -uNr a/net/mac80211/work.c b/net/mac80211/work.c
--- a/net/mac80211/work.c	2012-03-12 18:41:21.000000000 +0200
+++ b/net/mac80211/work.c	2012-04-10 17:01:43.000000000 +0300
@@ -7,6 +7,7 @@
  * Copyright 2006-2007	Jiri Benc <jbenc@suse.cz>
  * Copyright 2007, Michael Wu <flamingice@sourmilk.net>
  * Copyright 2009, Johannes Berg <johannes@sipsolutions.net>
+ * Copyright (C) 2012 Sony Mobile Communications AB.
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 as
@@ -627,8 +628,7 @@
 	auth_transaction = le16_to_cpu(mgmt->u.auth.auth_transaction);
 	status_code = le16_to_cpu(mgmt->u.auth.status_code);
 
-	if (auth_alg != wk->probe_auth.algorithm ||
-	    auth_transaction != wk->probe_auth.transaction)
+	if (auth_transaction != wk->probe_auth.transaction)
 		return WORK_ACT_NONE;
 
 	if (status_code != WLAN_STATUS_SUCCESS) {
@@ -637,6 +637,9 @@
 		return WORK_ACT_DONE;
 	}
 
+	if (auth_alg != wk->probe_auth.algorithm)
+		return WORK_ACT_NONE;
+
 	switch (wk->probe_auth.algorithm) {
 	case WLAN_AUTH_OPEN:
 	case WLAN_AUTH_LEAP:
